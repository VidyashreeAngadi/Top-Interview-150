Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.
Example 1:
Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.
Example 2:
Input: target = 4, nums = [1,4,4]
Output: 1
Example 3:
Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0


class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        if (sum(nums)<target):
            return 0
        si=s=0
        n=len(nums)
        for li in range(len(nums)):
            s=s+nums[li]
            while s>=target:
                s=s-nums[si]
                n=min(n,li-si+1)
                si+=1
        return n
